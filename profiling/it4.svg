<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>runtime.(*spanSet).pop (1 samples, 0.02%)</title><rect x="20.0" y="213" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="23.00" y="223.5" ></text>
</g>
<g >
<title>bufio.(*Scanner).Scan (902 samples, 20.11%)</title><rect x="855.7" y="229" width="237.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="858.68" y="239.5" >bufio.(*Scanner).Scan</text>
</g>
<g >
<title>runtime/internal/syscall.Syscall6 (292 samples, 6.51%)</title><rect x="1015.9" y="133" width="76.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1018.87" y="143.5" >runtime/..</text>
</g>
<g >
<title>runtime.unlock2 (1 samples, 0.02%)</title><rect x="19.7" y="165" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="22.73" y="175.5" ></text>
</g>
<g >
<title>runtime.wakep (2 samples, 0.04%)</title><rect x="1188.2" y="197" width="0.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1191.16" y="207.5" ></text>
</g>
<g >
<title>runtime.casgstatus (3 samples, 0.07%)</title><rect x="1014.0" y="133" width="0.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1017.03" y="143.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (3 samples, 0.07%)</title><rect x="240.2" y="69" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="243.16" y="79.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).trigger (1 samples, 0.02%)</title><rect x="273.0" y="181" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="276.04" y="191.5" ></text>
</g>
<g >
<title>runtime.park_m (18 samples, 0.40%)</title><rect x="1184.0" y="245" width="4.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1186.95" y="255.5" ></text>
</g>
<g >
<title>all (4,486 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwunlock (1 samples, 0.02%)</title><rect x="1011.7" y="165" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1014.66" y="175.5" ></text>
</g>
<g >
<title>runtime.putempty (1 samples, 0.02%)</title><rect x="1187.9" y="149" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.90" y="159.5" ></text>
</g>
<g >
<title>os.(*File).Read (2 samples, 0.04%)</title><rect x="1011.1" y="213" width="0.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1014.13" y="223.5" ></text>
</g>
<g >
<title>runtime.checkTimersNoP (1 samples, 0.02%)</title><rect x="1184.5" y="197" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1187.48" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (4 samples, 0.09%)</title><rect x="242.8" y="165" width="1.0" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="245.79" y="175.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (78 samples, 1.74%)</title><rect x="251.5" y="197" width="20.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="254.47" y="207.5" ></text>
</g>
<g >
<title>runtime.findRunnable (16 samples, 0.36%)</title><rect x="1184.0" y="213" width="4.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1186.95" y="223.5" ></text>
</g>
<g >
<title>runtime.(*activeSweep).begin (1 samples, 0.02%)</title><rect x="10.0" y="245" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.divRoundUp (1 samples, 0.02%)</title><rect x="25.8" y="229" width="0.2" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="28.78" y="239.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.02%)</title><rect x="28.1" y="149" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="31.15" y="159.5" ></text>
</g>
<g >
<title>runtime.releasep (1 samples, 0.02%)</title><rect x="1187.4" y="197" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1190.37" y="207.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.02%)</title><rect x="26.8" y="133" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="29.83" y="143.5" ></text>
</g>
<g >
<title>main.(*HashMap).Get (491 samples, 10.95%)</title><rect x="387.2" y="245" width="129.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="390.20" y="255.5" >main.(*HashMap)...</text>
</g>
<g >
<title>runtime.(*stkframe).getStackMap (1 samples, 0.02%)</title><rect x="30.5" y="133" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="33.52" y="143.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (1 samples, 0.02%)</title><rect x="69.2" y="181" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="72.18" y="191.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func2 (2 samples, 0.04%)</title><rect x="28.9" y="213" width="0.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="31.94" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (1 samples, 0.02%)</title><rect x="28.4" y="197" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="31.41" y="207.5" ></text>
</g>
<g >
<title>runtime.mergeSummaries (1 samples, 0.02%)</title><rect x="239.9" y="37" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="242.90" y="47.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.02%)</title><rect x="26.8" y="181" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="29.83" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (32 samples, 0.71%)</title><rect x="234.1" y="165" width="8.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="237.11" y="175.5" ></text>
</g>
<g >
<title>runtime.scanblock (9 samples, 0.20%)</title><rect x="266.7" y="69" width="2.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="269.73" y="79.5" ></text>
</g>
<g >
<title>syscall.Read (305 samples, 6.80%)</title><rect x="1012.4" y="197" width="80.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1015.45" y="207.5" >syscall.R..</text>
</g>
<g >
<title>os.(*File).wrapErr (1 samples, 0.02%)</title><rect x="1011.4" y="197" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1014.40" y="207.5" ></text>
</g>
<g >
<title>runtime.spanOf (1 samples, 0.02%)</title><rect x="268.8" y="53" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="271.83" y="63.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (1 samples, 0.02%)</title><rect x="69.2" y="197" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="72.18" y="207.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (9 samples, 0.20%)</title><rect x="266.7" y="85" width="2.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="269.73" y="95.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint8).Load (1 samples, 0.02%)</title><rect x="242.3" y="85" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="245.26" y="95.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.02%)</title><rect x="1015.1" y="101" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1018.08" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (1 samples, 0.02%)</title><rect x="30.3" y="133" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="33.25" y="143.5" ></text>
</g>
<g >
<title>runtime.findObject (4 samples, 0.09%)</title><rect x="1009.3" y="133" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1012.29" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrain (4 samples, 0.09%)</title><rect x="69.4" y="213" width="1.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="72.45" y="223.5" ></text>
</g>
<g >
<title>runtime.sweepone (60 samples, 1.34%)</title><rect x="10.3" y="245" width="15.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="13.26" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.02%)</title><rect x="1188.7" y="101" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1191.68" y="111.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.02%)</title><rect x="28.1" y="165" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="31.15" y="175.5" ></text>
</g>
<g >
<title>bytes.IndexByte (216 samples, 4.81%)</title><rect x="951.9" y="213" width="56.9" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="954.95" y="223.5" >bytes...</text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (14 samples, 0.31%)</title><rect x="244.6" y="181" width="3.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="247.63" y="191.5" ></text>
</g>
<g >
<title>bufio.dropCR (30 samples, 0.67%)</title><rect x="944.1" y="213" width="7.8" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="947.06" y="223.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint32).Add (4 samples, 0.09%)</title><rect x="17.6" y="165" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="20.63" y="175.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (1 samples, 0.02%)</title><rect x="70.2" y="197" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="73.24" y="207.5" ></text>
</g>
<g >
<title>runtime.publicationBarrier (20 samples, 0.45%)</title><rect x="273.8" y="197" width="5.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="276.83" y="207.5" ></text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.02%)</title><rect x="1188.7" y="181" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1191.68" y="191.5" ></text>
</g>
<g >
<title>runtime.futexsleep (1 samples, 0.02%)</title><rect x="1184.7" y="149" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1187.74" y="159.5" ></text>
</g>
<g >
<title>runtime.spanOf (1 samples, 0.02%)</title><rect x="270.4" y="85" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="273.41" y="95.5" ></text>
</g>
<g >
<title>runtime/internal/syscall.Syscall6 (1 samples, 0.02%)</title><rect x="1187.1" y="165" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1190.11" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrain (152 samples, 3.39%)</title><rect x="29.5" y="213" width="39.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="32.47" y="223.5" >run..</text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.02%)</title><rect x="28.4" y="181" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="31.41" y="191.5" ></text>
</g>
<g >
<title>runtime.gcTrigger.test (1 samples, 0.02%)</title><rect x="273.0" y="197" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="276.04" y="207.5" ></text>
</g>
<g >
<title>runtime.acquirem (61 samples, 1.36%)</title><rect x="107.1" y="213" width="16.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="110.06" y="223.5" ></text>
</g>
<g >
<title>runtime.mProf_Flush (1 samples, 0.02%)</title><rect x="27.9" y="213" width="0.2" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="30.89" y="223.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.02%)</title><rect x="30.0" y="117" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="32.99" y="127.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (6 samples, 0.13%)</title><rect x="29.5" y="181" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="32.47" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (2 samples, 0.04%)</title><rect x="238.8" y="53" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="241.85" y="63.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination (4 samples, 0.09%)</title><rect x="27.6" y="229" width="1.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="30.62" y="239.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (2 samples, 0.04%)</title><rect x="26.8" y="213" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="29.83" y="223.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.02%)</title><rect x="1015.1" y="53" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1018.08" y="63.5" ></text>
</g>
<g >
<title>runtime.gcStart.func2 (3 samples, 0.07%)</title><rect x="272.3" y="165" width="0.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="275.25" y="175.5" ></text>
</g>
<g >
<title>runtime.readUintptr (2 samples, 0.04%)</title><rect x="51.0" y="181" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="54.03" y="191.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readLock (2 samples, 0.04%)</title><rect x="1011.9" y="197" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1014.92" y="207.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint32).Add (5 samples, 0.11%)</title><rect x="20.3" y="213" width="1.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="23.26" y="223.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.02%)</title><rect x="1184.7" y="165" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.74" y="175.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (1 samples, 0.02%)</title><rect x="1099.5" y="213" width="0.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1102.51" y="223.5" ></text>
</g>
<g >
<title>runtime.casgstatus (3 samples, 0.07%)</title><rect x="1012.7" y="117" width="0.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1015.71" y="127.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (8 samples, 0.18%)</title><rect x="14.2" y="149" width="2.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.21" y="159.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (2 samples, 0.04%)</title><rect x="26.8" y="197" width="0.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="29.83" y="207.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (1 samples, 0.02%)</title><rect x="30.5" y="117" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="33.52" y="127.5" ></text>
</g>
<g >
<title>runtime.futexsleep (1 samples, 0.02%)</title><rect x="26.8" y="149" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="29.83" y="159.5" ></text>
</g>
<g >
<title>runtime/internal/sys.LeadingZeros64 (1 samples, 0.02%)</title><rect x="16.0" y="133" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="19.05" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="28.9" y="229" width="0.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="31.94" y="239.5" ></text>
</g>
<g >
<title>runtime.getMCache (25 samples, 0.56%)</title><rect x="124.9" y="213" width="6.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="127.95" y="223.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint64).Add (1 samples, 0.02%)</title><rect x="243.6" y="133" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="246.58" y="143.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (3 samples, 0.07%)</title><rect x="1014.8" y="133" width="0.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1017.81" y="143.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (4 samples, 0.09%)</title><rect x="242.8" y="149" width="1.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="245.79" y="159.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (11 samples, 0.25%)</title><rect x="22.6" y="229" width="2.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="25.63" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (30 samples, 0.67%)</title><rect x="234.6" y="149" width="7.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="237.64" y="159.5" ></text>
</g>
<g >
<title>runtime.scanobject (120 samples, 2.67%)</title><rect x="32.6" y="197" width="31.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="35.62" y="207.5" >ru..</text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.02%)</title><rect x="1188.7" y="133" width="0.2" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="1191.68" y="143.5" ></text>
</g>
<g >
<title>runtime.gcSweep (1 samples, 0.02%)</title><rect x="28.1" y="181" width="0.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="31.15" y="191.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (4 samples, 0.09%)</title><rect x="236.5" y="53" width="1.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="239.48" y="63.5" ></text>
</g>
<g >
<title>runtime.resetspinning (2 samples, 0.04%)</title><rect x="1188.2" y="213" width="0.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1191.16" y="223.5" ></text>
</g>
<g >
<title>runtime.(*consistentHeapStats).acquire (1 samples, 0.02%)</title><rect x="236.2" y="69" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="239.21" y="79.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (19 samples, 0.42%)</title><rect x="64.2" y="197" width="5.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="67.19" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptall (1 samples, 0.02%)</title><rect x="27.1" y="181" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="30.10" y="191.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).next (2 samples, 0.04%)</title><rect x="29.7" y="149" width="0.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="32.73" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (2 samples, 0.04%)</title><rect x="1187.6" y="181" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1190.63" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.02%)</title><rect x="19.5" y="181" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="22.47" y="191.5" ></text>
</g>
<g >
<title>runtime.scanblock (6 samples, 0.13%)</title><rect x="31.0" y="165" width="1.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="34.04" y="175.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.02%)</title><rect x="1188.7" y="149" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1191.68" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).tryAllocMSpan (1 samples, 0.02%)</title><rect x="242.0" y="85" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="245.00" y="95.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).dispose (2 samples, 0.04%)</title><rect x="1187.6" y="165" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1190.63" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.02%)</title><rect x="28.4" y="133" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="31.41" y="143.5" ></text>
</g>
<g >
<title>syscall.Syscall (305 samples, 6.80%)</title><rect x="1012.4" y="165" width="80.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1015.45" y="175.5" >syscall.S..</text>
</g>
<g >
<title>runtime.(*sweepLocker).tryAcquire (1 samples, 0.02%)</title><rect x="25.5" y="229" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="28.52" y="239.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.02%)</title><rect x="30.5" y="101" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="33.52" y="111.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.02%)</title><rect x="69.2" y="149" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="72.18" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (62 samples, 1.38%)</title><rect x="232.3" y="197" width="16.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="235.27" y="207.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (1 samples, 0.02%)</title><rect x="1188.4" y="149" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1191.42" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (11 samples, 0.25%)</title><rect x="248.6" y="197" width="2.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="251.58" y="207.5" ></text>
</g>
<g >
<title>runtime.alignUp (7 samples, 0.16%)</title><rect x="123.1" y="213" width="1.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="126.11" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).fullUnswept (1 samples, 0.02%)</title><rect x="12.1" y="229" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="15.10" y="239.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.02%)</title><rect x="26.8" y="165" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="29.83" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (28 samples, 0.62%)</title><rect x="234.6" y="85" width="7.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="237.64" y="95.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (6 samples, 0.13%)</title><rect x="31.0" y="181" width="1.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="34.04" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (30 samples, 0.67%)</title><rect x="234.6" y="117" width="7.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="237.64" y="127.5" ></text>
</g>
<g >
<title>runtime.suspendG (1 samples, 0.02%)</title><rect x="30.8" y="165" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="33.78" y="175.5" ></text>
</g>
<g >
<title>runtime.newArenaMayUnlock (1 samples, 0.02%)</title><rect x="241.5" y="37" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="244.48" y="47.5" ></text>
</g>
<g >
<title>runtime.scanobject (10 samples, 0.22%)</title><rect x="269.1" y="101" width="2.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="272.09" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (4 samples, 0.09%)</title><rect x="48.9" y="181" width="1.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="51.93" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.02%)</title><rect x="1188.7" y="117" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1191.68" y="127.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.02%)</title><rect x="1188.4" y="133" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1191.42" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (20 samples, 0.45%)</title><rect x="266.7" y="165" width="5.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="269.73" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeMSpanLocked (1 samples, 0.02%)</title><rect x="12.9" y="181" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="15.89" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.02%)</title><rect x="28.4" y="149" width="0.3" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="31.41" y="159.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint32).CompareAndSwap (2 samples, 0.04%)</title><rect x="26.0" y="245" width="0.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="29.05" y="255.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.02%)</title><rect x="27.4" y="229" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="30.36" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="26.8" y="229" width="0.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="29.83" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.07%)</title><rect x="272.3" y="181" width="0.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="275.25" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (4 samples, 0.09%)</title><rect x="69.4" y="229" width="1.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="72.45" y="239.5" ></text>
</g>
<g >
<title>runtime.schedule (18 samples, 0.40%)</title><rect x="1184.0" y="229" width="4.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1186.95" y="239.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func2 (1 samples, 0.02%)</title><rect x="28.1" y="197" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="31.15" y="207.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint8).Load (1 samples, 0.02%)</title><rect x="1013.5" y="133" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1016.50" y="143.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (8 samples, 0.18%)</title><rect x="1009.0" y="165" width="2.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1012.03" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (30 samples, 0.67%)</title><rect x="234.6" y="133" width="7.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="237.64" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (8 samples, 0.18%)</title><rect x="1009.0" y="181" width="2.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1012.03" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.04%)</title><rect x="28.1" y="213" width="0.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="31.15" y="223.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).reset (3 samples, 0.07%)</title><rect x="272.3" y="133" width="0.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="275.25" y="143.5" ></text>
</g>
<g >
<title>runtime.(*sweepClass).update (1 samples, 0.02%)</title><rect x="22.4" y="229" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="25.36" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (1 samples, 0.02%)</title><rect x="239.4" y="69" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="242.37" y="79.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (1 samples, 0.02%)</title><rect x="271.7" y="101" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="274.73" y="111.5" ></text>
</g>
<g >
<title>runtime.notesleep (8 samples, 0.18%)</title><rect x="1185.0" y="181" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.00" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (30 samples, 0.67%)</title><rect x="234.6" y="101" width="7.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="237.64" y="111.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (2 samples, 0.04%)</title><rect x="28.9" y="197" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="31.94" y="207.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.02%)</title><rect x="30.3" y="149" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="33.25" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (20 samples, 0.45%)</title><rect x="266.7" y="117" width="5.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="269.73" y="127.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.forEachP.func6 (1 samples, 0.02%)</title><rect x="27.4" y="197" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="30.36" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).partialSwept (1 samples, 0.02%)</title><rect x="242.5" y="165" width="0.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="245.53" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (1 samples, 0.02%)</title><rect x="239.9" y="53" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="242.90" y="63.5" ></text>
</g>
<g >
<title>runtime.procyield (3 samples, 0.07%)</title><rect x="1188.9" y="197" width="0.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1191.95" y="207.5" ></text>
</g>
<g >
<title>syscall.read (305 samples, 6.80%)</title><rect x="1012.4" y="181" width="80.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1015.45" y="191.5" >syscall.r..</text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (2 samples, 0.04%)</title><rect x="240.9" y="53" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="243.95" y="63.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="1015.1" y="117" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1018.08" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (2 samples, 0.04%)</title><rect x="1184.0" y="197" width="0.5" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1186.95" y="207.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).resolveInternal (1 samples, 0.02%)</title><rect x="29.7" y="133" width="0.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="32.73" y="143.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (2 samples, 0.04%)</title><rect x="17.1" y="165" width="0.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="20.10" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.07%)</title><rect x="1188.9" y="213" width="0.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1191.95" y="223.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1,190 samples, 26.53%)</title><rect x="74.2" y="229" width="313.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="77.18" y="239.5" >runtime.slicebytetostring</text>
</g>
<g >
<title>runtime.unlockWithRank (1 samples, 0.02%)</title><rect x="19.7" y="181" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="22.73" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).countAlloc (2 samples, 0.04%)</title><rect x="21.8" y="229" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="24.84" y="239.5" ></text>
</g>
<g >
<title>runtime.spanOf (3 samples, 0.07%)</title><rect x="1010.3" y="133" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1013.34" y="143.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint32).Add (2 samples, 0.04%)</title><rect x="25.0" y="213" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="27.99" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocToCache (2 samples, 0.04%)</title><rect x="239.6" y="69" width="0.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="242.63" y="79.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.02%)</title><rect x="27.4" y="213" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="30.36" y="223.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (1 samples, 0.02%)</title><rect x="30.5" y="149" width="0.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="33.52" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).update (1 samples, 0.02%)</title><rect x="233.8" y="165" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="236.85" y="175.5" ></text>
</g>
<g >
<title>runtime.scanstack (4 samples, 0.09%)</title><rect x="29.7" y="165" width="1.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="32.73" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (29 samples, 0.65%)</title><rect x="12.4" y="229" width="7.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="15.37" y="239.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.02%)</title><rect x="1015.1" y="69" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1018.08" y="79.5" ></text>
</g>
<g >
<title>runtime.systemstack (28 samples, 0.62%)</title><rect x="12.6" y="213" width="7.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="15.63" y="223.5" ></text>
</g>
<g >
<title>runtime.(*specialsIter).valid (1 samples, 0.02%)</title><rect x="28.4" y="101" width="0.3" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="31.41" y="111.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.02%)</title><rect x="1184.7" y="133" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1187.74" y="143.5" ></text>
</g>
<g >
<title>os.(*File).read (308 samples, 6.87%)</title><rect x="1011.7" y="213" width="81.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1014.66" y="223.5" >os.(*File..</text>
</g>
<g >
<title>bufio.(*Scanner).advance (26 samples, 0.58%)</title><rect x="1092.9" y="229" width="6.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1095.94" y="239.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.07%)</title><rect x="69.4" y="197" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="72.45" y="207.5" ></text>
</g>
<g >
<title>runtime.releasem (45 samples, 1.00%)</title><rect x="375.4" y="213" width="11.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="378.36" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (152 samples, 3.39%)</title><rect x="29.5" y="229" width="39.9" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="32.47" y="239.5" >run..</text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.02%)</title><rect x="1187.1" y="197" width="0.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1190.11" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (3 samples, 0.07%)</title><rect x="18.7" y="181" width="0.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="21.68" y="191.5" ></text>
</g>
<g >
<title>runtime.wirep (1 samples, 0.02%)</title><rect x="1015.3" y="117" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1018.34" y="127.5" ></text>
</g>
<g >
<title>bufio.ScanLines (109 samples, 2.43%)</title><rect x="915.4" y="213" width="28.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="918.39" y="223.5" >bu..</text>
</g>
<g >
<title>runtime.markroot (12 samples, 0.27%)</title><rect x="29.5" y="197" width="3.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="32.47" y="207.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (213 samples, 4.75%)</title><rect x="319.3" y="213" width="56.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="322.34" y="223.5" >runti..</text>
</g>
<g >
<title>runtime.mallocgc (560 samples, 12.48%)</title><rect x="131.8" y="213" width="147.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="134.79" y="223.5" >runtime.mallocgc</text>
</g>
<g >
<title>runtime.finishsweep_m (3 samples, 0.07%)</title><rect x="272.3" y="149" width="0.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="275.25" y="159.5" ></text>
</g>
<g >
<title>runtime.mcall (18 samples, 0.40%)</title><rect x="1184.0" y="261" width="4.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1186.95" y="271.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (1 samples, 0.02%)</title><rect x="1011.7" y="197" width="0.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="1014.66" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (44 samples, 0.98%)</title><rect x="233.1" y="181" width="11.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="236.06" y="191.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (1 samples, 0.02%)</title><rect x="241.5" y="53" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="244.48" y="63.5" ></text>
</g>
<g >
<title>runtime/internal/syscall.EpollWait (1 samples, 0.02%)</title><rect x="1187.1" y="181" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1190.11" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.02%)</title><rect x="28.4" y="117" width="0.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="31.41" y="127.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (28 samples, 0.62%)</title><rect x="12.6" y="197" width="7.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="15.63" y="207.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (4 samples, 0.09%)</title><rect x="270.7" y="85" width="1.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="273.67" y="95.5" ></text>
</g>
<g >
<title>runtime.memmove (153 samples, 3.41%)</title><rect x="279.1" y="213" width="40.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="282.09" y="223.5" >run..</text>
</g>
<g >
<title>runtime.makeSpanClass (1 samples, 0.02%)</title><rect x="131.5" y="213" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="134.52" y="223.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.02%)</title><rect x="1188.7" y="165" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1191.68" y="175.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.02%)</title><rect x="30.5" y="85" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="33.52" y="95.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.02%)</title><rect x="1188.7" y="213" width="0.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1191.68" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (11 samples, 0.25%)</title><rect x="14.2" y="165" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="17.21" y="175.5" ></text>
</g>
<g >
<title>runtime.futexsleep (7 samples, 0.16%)</title><rect x="1185.3" y="165" width="1.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1188.27" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (156 samples, 3.48%)</title><rect x="29.5" y="245" width="41.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="32.47" y="255.5" >run..</text>
</g>
<g >
<title>runtime.(*activeSweep).end (1 samples, 0.02%)</title><rect x="11.8" y="229" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="14.84" y="239.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.02%)</title><rect x="1188.7" y="229" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1191.68" y="239.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (1 samples, 0.02%)</title><rect x="24.7" y="213" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="27.73" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).find (1 samples, 0.02%)</title><rect x="239.6" y="53" width="0.3" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="242.63" y="63.5" ></text>
</g>
<g >
<title>runtime.morestack (4 samples, 0.09%)</title><rect x="1188.7" y="261" width="1.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1191.68" y="271.5" ></text>
</g>
<g >
<title>runtime.findRunnable (1 samples, 0.02%)</title><rect x="1188.7" y="197" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1191.68" y="207.5" ></text>
</g>
<g >
<title>runtime.mPark (8 samples, 0.18%)</title><rect x="1185.0" y="197" width="2.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1188.00" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (7 samples, 0.16%)</title><rect x="237.5" y="69" width="1.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="240.53" y="79.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (8 samples, 0.18%)</title><rect x="1009.0" y="149" width="2.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1012.03" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (8 samples, 0.18%)</title><rect x="27.4" y="245" width="2.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="30.36" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (21 samples, 0.47%)</title><rect x="13.2" y="181" width="5.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="16.16" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.02%)</title><rect x="1015.1" y="85" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1018.08" y="95.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readUnlock (1 samples, 0.02%)</title><rect x="1011.7" y="181" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1014.66" y="191.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (167 samples, 3.72%)</title><rect x="26.6" y="261" width="43.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="29.57" y="271.5" >runt..</text>
</g>
<g >
<title>runtime.(*mheap).nextSpanForSweep (7 samples, 0.16%)</title><rect x="20.0" y="229" width="1.8" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="23.00" y="239.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (6 samples, 0.13%)</title><rect x="14.2" y="133" width="1.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="17.21" y="143.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (1 samples, 0.02%)</title><rect x="70.0" y="181" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="72.97" y="191.5" ></text>
</g>
<g >
<title>runtime.(*scavengeIndex).free (1 samples, 0.02%)</title><rect x="16.3" y="149" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="19.31" y="159.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (8 samples, 0.18%)</title><rect x="1009.0" y="197" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1012.03" y="207.5" ></text>
</g>
<g >
<title>runtime.mPark (1 samples, 0.02%)</title><rect x="1184.7" y="181" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1187.74" y="191.5" ></text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.02%)</title><rect x="1184.7" y="197" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1187.74" y="207.5" ></text>
</g>
<g >
<title>main.main (1,723 samples, 38.41%)</title><rect x="730.7" y="245" width="453.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="733.73" y="255.5" >main.main</text>
</g>
<g >
<title>runtime.futex (7 samples, 0.16%)</title><rect x="1185.3" y="149" width="1.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1188.27" y="159.5" ></text>
</g>
<g >
<title>runtime.mergeSummaries (1 samples, 0.02%)</title><rect x="15.8" y="133" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="18.79" y="143.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (4 samples, 0.09%)</title><rect x="1188.7" y="245" width="1.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1191.68" y="255.5" ></text>
</g>
<g >
<title>runtime.findObject (3 samples, 0.07%)</title><rect x="50.2" y="181" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="53.25" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.02%)</title><rect x="28.7" y="213" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="31.68" y="223.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.02%)</title><rect x="28.7" y="229" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="31.68" y="239.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (1 samples, 0.02%)</title><rect x="1183.7" y="229" width="0.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1186.69" y="239.5" ></text>
</g>
<g >
<title>runtime.markroot (9 samples, 0.20%)</title><rect x="266.7" y="101" width="2.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="269.73" y="111.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (9 samples, 0.20%)</title><rect x="61.8" y="181" width="2.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="64.82" y="191.5" ></text>
</g>
<g >
<title>runtime.newAllocBits (3 samples, 0.07%)</title><rect x="240.9" y="69" width="0.8" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="243.95" y="79.5" ></text>
</g>
<g >
<title>runtime.decoderune (17 samples, 0.38%)</title><rect x="726.3" y="229" width="4.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="729.26" y="239.5" ></text>
</g>
<g >
<title>runtime.pidleget (2 samples, 0.04%)</title><rect x="28.9" y="181" width="0.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="31.94" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.02%)</title><rect x="19.5" y="165" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="22.47" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwlock (2 samples, 0.04%)</title><rect x="1011.9" y="181" width="0.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1014.92" y="191.5" ></text>
</g>
<g >
<title>gcWriteBarrier (9 samples, 0.20%)</title><rect x="1008.8" y="213" width="2.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1011.77" y="223.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.02%)</title><rect x="69.2" y="165" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="72.18" y="175.5" ></text>
</g>
<g >
<title>runtime.procresize (1 samples, 0.02%)</title><rect x="28.4" y="165" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="31.41" y="175.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (2 samples, 0.04%)</title><rect x="1187.6" y="197" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1190.63" y="207.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.04%)</title><rect x="1188.2" y="181" width="0.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1191.16" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocNeedsZero (1 samples, 0.02%)</title><rect x="238.6" y="53" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="241.58" y="63.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (1 samples, 0.02%)</title><rect x="27.4" y="181" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="30.36" y="191.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint32).Add (1 samples, 0.02%)</title><rect x="241.7" y="69" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="244.74" y="79.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (64 samples, 1.43%)</title><rect x="991.9" y="197" width="16.9" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="994.93" y="207.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (1 samples, 0.02%)</title><rect x="1189.7" y="261" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1192.74" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (2 samples, 0.04%)</title><rect x="269.9" y="85" width="0.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="272.88" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (1 samples, 0.02%)</title><rect x="50.0" y="181" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="52.98" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (2 samples, 0.04%)</title><rect x="238.1" y="53" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="241.06" y="63.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint32).Add (3 samples, 0.07%)</title><rect x="243.8" y="165" width="0.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="246.84" y="175.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.02%)</title><rect x="30.0" y="133" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="32.99" y="143.5" ></text>
</g>
<g >
<title>runtime.bgsweep (63 samples, 1.40%)</title><rect x="10.0" y="261" width="16.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.forEachP (2 samples, 0.04%)</title><rect x="26.8" y="245" width="0.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="29.83" y="255.5" ></text>
</g>
<g >
<title>runtime.spanClass.sizeclass (1 samples, 0.02%)</title><rect x="248.3" y="181" width="0.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="251.31" y="191.5" ></text>
</g>
<g >
<title>runtime.main (4,233 samples, 94.36%)</title><rect x="70.5" y="261" width="1113.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="73.50" y="271.5" >runtime.main</text>
</g>
<g >
<title>main.Hash (630 samples, 14.04%)</title><rect x="565.0" y="245" width="165.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="568.02" y="255.5" >main.Hash</text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.02%)</title><rect x="1188.4" y="165" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1191.42" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcCPULimiterState).startGCTransition (1 samples, 0.02%)</title><rect x="272.0" y="181" width="0.3" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="274.99" y="191.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (1 samples, 0.02%)</title><rect x="1188.7" y="85" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1191.68" y="95.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.02%)</title><rect x="1184.2" y="181" width="0.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1187.21" y="191.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (20 samples, 0.45%)</title><rect x="266.7" y="149" width="5.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="269.73" y="159.5" ></text>
</g>
<g >
<title>runtime.offAddr.lessThan (2 samples, 0.04%)</title><rect x="16.6" y="149" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="19.58" y="159.5" ></text>
</g>
<g >
<title>main.ParseTemp (319 samples, 7.11%)</title><rect x="1099.8" y="229" width="83.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1102.78" y="239.5" >main.Pars..</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (20 samples, 0.45%)</title><rect x="266.7" y="133" width="5.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="269.73" y="143.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint32).CompareAndSwap (1 samples, 0.02%)</title><rect x="27.1" y="165" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="30.10" y="175.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (20 samples, 0.45%)</title><rect x="266.7" y="181" width="5.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="269.73" y="191.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (1 samples, 0.02%)</title><rect x="273.6" y="197" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="276.57" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (4 samples, 0.09%)</title><rect x="236.5" y="69" width="1.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="239.48" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (4 samples, 0.09%)</title><rect x="247.3" y="165" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="250.26" y="175.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (293 samples, 6.53%)</title><rect x="1015.6" y="149" width="77.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1018.60" y="159.5" >syscall...</text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.07%)</title><rect x="1188.9" y="229" width="0.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1191.95" y="239.5" ></text>
</g>
<g >
<title>runtime.reentersyscall (3 samples, 0.07%)</title><rect x="1012.7" y="133" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1015.71" y="143.5" ></text>
</g>
<g >
<title>indexbytebody (137 samples, 3.05%)</title><rect x="955.9" y="197" width="36.0" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="958.89" y="207.5" >ind..</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.02%)</title><rect x="1092.7" y="213" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1095.67" y="223.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (39 samples, 0.87%)</title><rect x="51.6" y="181" width="10.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="54.56" y="191.5" ></text>
</g>
<g >
<title>runtime.(*cpuStats).accumulate (1 samples, 0.02%)</title><rect x="27.6" y="213" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="30.62" y="223.5" ></text>
</g>
<g >
<title>runtime.gcmarknewobject (1 samples, 0.02%)</title><rect x="273.3" y="197" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="276.30" y="207.5" ></text>
</g>
<g >
<title>main.GetSplit (185 samples, 4.12%)</title><rect x="516.4" y="245" width="48.6" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="519.35" y="255.5" >main..</text>
</g>
<g >
<title>runtime.entersyscall (4 samples, 0.09%)</title><rect x="1012.7" y="149" width="1.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1015.71" y="159.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (7 samples, 0.16%)</title><rect x="1013.8" y="149" width="1.8" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1016.76" y="159.5" ></text>
</g>
<g >
<title>runtime.gcStart (4 samples, 0.09%)</title><rect x="272.0" y="197" width="1.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="274.99" y="207.5" ></text>
</g>
<g >
<title>bufio.(*Scanner).Text (1,204 samples, 26.84%)</title><rect x="70.5" y="245" width="316.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="73.50" y="255.5" >bufio.(*Scanner).Text</text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (1 samples, 0.02%)</title><rect x="270.1" y="69" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="273.15" y="79.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint64).CompareAndSwap (1 samples, 0.02%)</title><rect x="21.6" y="213" width="0.2" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="24.57" y="223.5" ></text>
</g>
<g >
<title>runtime.(*lfstack).push (1 samples, 0.02%)</title><rect x="1187.9" y="133" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1190.90" y="143.5" ></text>
</g>
</g>
</svg>
