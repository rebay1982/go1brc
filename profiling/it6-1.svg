<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="246.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="229" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="229" > </text>
<g id="frames">
<g >
<title>runtime.mcall (1,163 samples, 3.57%)</title><rect x="1099.3" y="181" width="42.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1102.33" y="191.5" >run..</text>
</g>
<g >
<title>runtime.runqput (15 samples, 0.05%)</title><rect x="836.5" y="69" width="0.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="839.50" y="79.5" ></text>
</g>
<g >
<title>syscall.Syscall (149 samples, 0.46%)</title><rect x="1093.9" y="101" width="5.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1096.90" y="111.5" ></text>
</g>
<g >
<title>all (32,613 samples, 100%)</title><rect x="10.0" y="197" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>runtime.memmove (279 samples, 0.86%)</title><rect x="847.3" y="117" width="10.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="850.32" y="127.5" ></text>
</g>
<g >
<title>runtime.unlock (7 samples, 0.02%)</title><rect x="708.0" y="149" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="710.98" y="159.5" ></text>
</g>
<g >
<title>runtime.(*m).becomeSpinning (11 samples, 0.03%)</title><rect x="1101.0" y="133" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1104.03" y="143.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.01%)</title><rect x="1088.2" y="117" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1091.18" y="127.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (67 samples, 0.21%)</title><rect x="1084.6" y="117" width="2.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1087.60" y="127.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (7,526 samples, 23.08%)</title><rect x="814.7" y="165" width="272.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="817.72" y="175.5" >runtime.chanrecv2</text>
</g>
<g >
<title>runtime.gopark (8 samples, 0.02%)</title><rect x="131.8" y="133" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="134.79" y="143.5" ></text>
</g>
<g >
<title>runtime.chanbuf (6 samples, 0.02%)</title><rect x="109.4" y="149" width="0.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="112.43" y="159.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (175 samples, 0.54%)</title><rect x="789.9" y="165" width="6.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="792.94" y="175.5" ></text>
</g>
<g >
<title>runtime.procyield (12,484 samples, 38.28%)</title><rect x="256.3" y="117" width="451.7" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="259.29" y="127.5" >runtime.procyield</text>
</g>
<g >
<title>runtime.(*mLockProfile).recordUnlock (103 samples, 0.32%)</title><rect x="1080.9" y="117" width="3.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1083.88" y="127.5" ></text>
</g>
<g >
<title>runtime.pidleget (5 samples, 0.02%)</title><rect x="1106.8" y="85" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1109.78" y="95.5" ></text>
</g>
<g >
<title>runtime/internal/syscall.Syscall6 (149 samples, 0.46%)</title><rect x="1093.9" y="69" width="5.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1096.90" y="79.5" ></text>
</g>
<g >
<title>runtime.nanotime (7 samples, 0.02%)</title><rect x="1114.0" y="117" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1116.98" y="127.5" ></text>
</g>
<g >
<title>runtime.findObject (4 samples, 0.01%)</title><rect x="1087.6" y="101" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1090.61" y="111.5" ></text>
</g>
<g >
<title>runtime.runqgrab (241 samples, 0.74%)</title><rect x="1122.7" y="85" width="8.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1125.74" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (3 samples, 0.01%)</title><rect x="1132.5" y="85" width="0.2" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="1135.54" y="95.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeue (251 samples, 0.77%)</title><rect x="100.0" y="149" width="9.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="103.02" y="159.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (5 samples, 0.02%)</title><rect x="1115.9" y="101" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1118.90" y="111.5" ></text>
</g>
<g >
<title>runtime.makeslice (151 samples, 0.46%)</title><rect x="1151.4" y="149" width="5.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1154.43" y="159.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (2,258 samples, 6.92%)</title><rect x="708.2" y="149" width="81.7" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="711.24" y="159.5" >runtime.u..</text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (3 samples, 0.01%)</title><rect x="1088.2" y="101" width="0.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1091.18" y="111.5" ></text>
</g>
<g >
<title>os.(*File).read (149 samples, 0.46%)</title><rect x="1093.9" y="149" width="5.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1096.90" y="159.5" ></text>
</g>
<g >
<title>runtime.nanotime (22 samples, 0.07%)</title><rect x="913.1" y="117" width="0.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="916.10" y="127.5" ></text>
</g>
<g >
<title>runtime.pMask.read (41 samples, 0.13%)</title><rect x="1114.2" y="117" width="1.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1117.24" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.01%)</title><rect x="1088.2" y="69" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1091.18" y="79.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (24 samples, 0.07%)</title><rect x="838.6" y="117" width="0.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="841.60" y="127.5" ></text>
</g>
<g >
<title>main.processChunk (159 samples, 0.49%)</title><rect x="1088.1" y="149" width="5.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1091.15" y="159.5" ></text>
</g>
<g >
<title>runtime.unlock2 (23 samples, 0.07%)</title><rect x="838.6" y="101" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="841.64" y="111.5" ></text>
</g>
<g >
<title>strings.Split (1,329 samples, 4.08%)</title><rect x="1141.9" y="181" width="48.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1144.91" y="191.5" >stri..</text>
</g>
<g >
<title>runtime.memequal (45 samples, 0.14%)</title><rect x="45.1" y="165" width="1.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="48.10" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (9 samples, 0.03%)</title><rect x="1107.1" y="101" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1110.07" y="111.5" ></text>
</g>
<g >
<title>runtime.nanotime (5 samples, 0.02%)</title><rect x="1134.4" y="85" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1137.42" y="95.5" ></text>
</g>
<g >
<title>runtime.procyield (9 samples, 0.03%)</title><rect x="1133.5" y="101" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1136.48" y="111.5" ></text>
</g>
<g >
<title>strings.Index (160 samples, 0.49%)</title><rect x="1160.1" y="149" width="5.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1163.08" y="159.5" ></text>
</g>
<g >
<title>runtime.procyield (3,473 samples, 10.65%)</title><rect x="917.5" y="117" width="125.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="920.48" y="127.5" >runtime.procyield</text>
</g>
<g >
<title>runtime.bgscavenge (7 samples, 0.02%)</title><rect x="1087.0" y="181" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1090.03" y="191.5" ></text>
</g>
<g >
<title>runtime.chansend1 (19,146 samples, 58.71%)</title><rect x="97.2" y="165" width="692.7" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="100.20" y="175.5" >runtime.chansend1</text>
</g>
<g >
<title>runtime.futexsleep (172 samples, 0.53%)</title><rect x="1107.8" y="85" width="6.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1110.76" y="95.5" ></text>
</g>
<g >
<title>runtime.sysUnused (7 samples, 0.02%)</title><rect x="1087.0" y="85" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1090.03" y="95.5" ></text>
</g>
<g >
<title>runtime.startm (104 samples, 0.32%)</title><rect x="1135.3" y="101" width="3.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1138.33" y="111.5" ></text>
</g>
<g >
<title>runtime.nanotime (5 samples, 0.02%)</title><rect x="1121.0" y="101" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1123.96" y="111.5" ></text>
</g>
<g >
<title>runtime.(*randomEnum).position (7 samples, 0.02%)</title><rect x="1106.0" y="117" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1109.02" y="127.5" ></text>
</g>
<g >
<title>runtime.recv.goready.func1 (58 samples, 0.18%)</title><rect x="835.5" y="101" width="2.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="838.53" y="111.5" ></text>
</g>
<g >
<title>runtime.memmove (124 samples, 0.38%)</title><rect x="135.7" y="117" width="4.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="138.66" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (3 samples, 0.01%)</title><rect x="1088.2" y="85" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1091.18" y="95.5" ></text>
</g>
<g >
<title>runtime.pidleget (13 samples, 0.04%)</title><rect x="1134.9" y="85" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1137.86" y="95.5" ></text>
</g>
<g >
<title>runtime.main (309 samples, 0.95%)</title><rect x="1088.1" y="181" width="11.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1091.15" y="191.5" ></text>
</g>
<g >
<title>runtime.cheaprand (4 samples, 0.01%)</title><rect x="1106.6" y="117" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1109.60" y="127.5" ></text>
</g>
<g >
<title>runtime.futexsleep (137 samples, 0.42%)</title><rect x="241.2" y="117" width="4.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="244.17" y="127.5" ></text>
</g>
<g >
<title>runtime.(*waitq).dequeue (93 samples, 0.29%)</title><rect x="816.5" y="149" width="3.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="819.53" y="159.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (149 samples, 0.46%)</title><rect x="1151.5" y="117" width="5.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1154.50" y="127.5" ></text>
</g>
<g >
<title>runtime.send (3 samples, 0.01%)</title><rect x="132.3" y="133" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="135.26" y="143.5" ></text>
</g>
<g >
<title>runtime.runqsteal (285 samples, 0.87%)</title><rect x="1121.1" y="101" width="10.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1124.15" y="111.5" ></text>
</g>
<g >
<title>main.resultsAggregator (7,945 samples, 24.36%)</title><rect x="799.6" y="181" width="287.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="802.56" y="191.5" >main.resultsAggregator</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (3 samples, 0.01%)</title><rect x="1088.2" y="53" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1091.18" y="63.5" ></text>
</g>
<g >
<title>runtime.futex (167 samples, 0.51%)</title><rect x="1107.9" y="69" width="6.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1110.94" y="79.5" ></text>
</g>
<g >
<title>runtime.memmove (108 samples, 0.33%)</title><rect x="1090.0" y="133" width="3.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1092.99" y="143.5" ></text>
</g>
<g >
<title>runtime.futex (134 samples, 0.41%)</title><rect x="241.3" y="101" width="4.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="244.27" y="111.5" ></text>
</g>
<g >
<title>runtime.chanparkcommit (5 samples, 0.02%)</title><rect x="1099.9" y="149" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1102.87" y="159.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Int32).Add (24 samples, 0.07%)</title><rect x="1139.6" y="133" width="0.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1142.56" y="143.5" ></text>
</g>
<g >
<title>main.parseTemp (504 samples, 1.55%)</title><rect x="79.0" y="165" width="18.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="81.96" y="175.5" ></text>
</g>
<g >
<title>runtime.updateTimerPMask (5 samples, 0.02%)</title><rect x="1116.2" y="101" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1119.19" y="111.5" ></text>
</g>
<g >
<title>runtime.gcDrain (19 samples, 0.06%)</title><rect x="1087.4" y="133" width="0.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1090.35" y="143.5" ></text>
</g>
<g >
<title>runtime.execute (42 samples, 0.13%)</title><rect x="1101.4" y="133" width="1.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1104.43" y="143.5" ></text>
</g>
<g >
<title>memeqbody (573 samples, 1.76%)</title><rect x="24.4" y="165" width="20.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="27.36" y="175.5" ></text>
</g>
<g >
<title>runtime.typedmemclr (155 samples, 0.48%)</title><rect x="839.5" y="133" width="5.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="842.47" y="143.5" ></text>
</g>
<g >
<title>runtime.checkTimers (4 samples, 0.01%)</title><rect x="1120.8" y="101" width="0.2" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1123.82" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (9 samples, 0.03%)</title><rect x="1133.9" y="101" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1136.88" y="111.5" ></text>
</g>
<g >
<title>runtime.casgstatus (9 samples, 0.03%)</title><rect x="836.1" y="69" width="0.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="839.07" y="79.5" ></text>
</g>
<g >
<title>runtime.ready (56 samples, 0.17%)</title><rect x="835.5" y="85" width="2.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="838.53" y="95.5" ></text>
</g>
<g >
<title>runtime.chansend (843 samples, 2.58%)</title><rect x="109.6" y="149" width="30.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="112.64" y="159.5" >ru..</text>
</g>
<g >
<title>runtime.growslice (50 samples, 0.15%)</title><rect x="1088.2" y="133" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1091.18" y="143.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (30 samples, 0.09%)</title><rect x="1088.3" y="117" width="1.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1091.29" y="127.5" ></text>
</g>
<g >
<title>main.(*HashMap).Get (992 samples, 3.04%)</title><rect x="10.8" y="181" width="35.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="13.83" y="191.5" >mai..</text>
</g>
<g >
<title>runtime.(*lockTimer).begin (29 samples, 0.09%)</title><rect x="909.8" y="117" width="1.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="912.84" y="127.5" ></text>
</g>
<g >
<title>runtime.osyield (99 samples, 0.30%)</title><rect x="913.9" y="117" width="3.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="916.90" y="127.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (176 samples, 0.54%)</title><rect x="783.6" y="117" width="6.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="786.57" y="127.5" ></text>
</g>
<g >
<title>runtime.pidlegetSpinning (4 samples, 0.01%)</title><rect x="837.4" y="53" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="840.37" y="63.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (15,688 samples, 48.10%)</title><rect x="140.4" y="149" width="567.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="143.36" y="159.5" >runtime.lockWithRank</text>
</g>
<g >
<title>runtime.nanotime (55 samples, 0.17%)</title><rect x="246.1" y="117" width="2.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="249.12" y="127.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (84 samples, 0.26%)</title><rect x="842.0" y="117" width="3.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="845.04" y="127.5" ></text>
</g>
<g >
<title>runtime.futex (13 samples, 0.04%)</title><rect x="839.0" y="69" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="842.00" y="79.5" ></text>
</g>
<g >
<title>runtime.systemstack (7 samples, 0.02%)</title><rect x="1087.0" y="117" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1090.03" y="127.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (24 samples, 0.07%)</title><rect x="1140.5" y="149" width="0.8" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1143.47" y="159.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.01%)</title><rect x="1088.0" y="117" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1091.04" y="127.5" ></text>
</g>
<g >
<title>runtime.casgstatus (12 samples, 0.04%)</title><rect x="1099.4" y="149" width="0.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1102.44" y="159.5" ></text>
</g>
<g >
<title>runtime.runqget (3 samples, 0.01%)</title><rect x="1139.2" y="133" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1142.24" y="143.5" ></text>
</g>
<g >
<title>runtime.madvise (7 samples, 0.02%)</title><rect x="1087.0" y="53" width="0.3" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1090.03" y="63.5" ></text>
</g>
<g >
<title>runtime.(*waitq).enqueue (5 samples, 0.02%)</title><rect x="109.1" y="149" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="112.10" y="159.5" ></text>
</g>
<g >
<title>strings.genSplit (1,329 samples, 4.08%)</title><rect x="1141.9" y="165" width="48.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1144.91" y="175.5" >stri..</text>
</g>
<g >
<title>runtime.(*scavengerState).run (7 samples, 0.02%)</title><rect x="1087.0" y="165" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1090.03" y="175.5" ></text>
</g>
<g >
<title>runtime.pidlegetSpinning (25 samples, 0.08%)</title><rect x="1134.4" y="101" width="0.9" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1137.42" y="111.5" ></text>
</g>
<g >
<title>runtime.stopm (19 samples, 0.06%)</title><rect x="1132.3" y="117" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1135.33" y="127.5" ></text>
</g>
<g >
<title>main.(*HashMap).Add (21 samples, 0.06%)</title><rect x="10.1" y="181" width="0.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="13.07" y="191.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByteString (38 samples, 0.12%)</title><rect x="1188.6" y="133" width="1.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1191.63" y="143.5" ></text>
</g>
<g >
<title>runtime.usleep (163 samples, 0.50%)</title><rect x="1125.6" y="69" width="5.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1128.56" y="79.5" ></text>
</g>
<g >
<title>runtime.pMask.set (6 samples, 0.02%)</title><rect x="1134.6" y="85" width="0.3" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1137.64" y="95.5" ></text>
</g>
<g >
<title>runtime.decoderune (25 samples, 0.08%)</title><rect x="70.5" y="165" width="0.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="73.53" y="175.5" ></text>
</g>
<g >
<title>syscall.Read (149 samples, 0.46%)</title><rect x="1093.9" y="133" width="5.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1096.90" y="143.5" ></text>
</g>
<g >
<title>runtime.wirep (8 samples, 0.02%)</title><rect x="1132.7" y="85" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1135.65" y="95.5" ></text>
</g>
<g >
<title>runtime.add (4 samples, 0.01%)</title><rect x="109.3" y="149" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="112.28" y="159.5" ></text>
</g>
<g >
<title>runtime.recv (51 samples, 0.16%)</title><rect x="837.6" y="133" width="1.9" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="840.62" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mLockProfile).recordUnlock (101 samples, 0.31%)</title><rect x="779.9" y="117" width="3.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="782.91" y="127.5" ></text>
</g>
<g >
<title>runtime.releaseSudog (4 samples, 0.01%)</title><rect x="132.1" y="133" width="0.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="135.11" y="143.5" ></text>
</g>
<g >
<title>runtime.casgstatus (26 samples, 0.08%)</title><rect x="1101.8" y="117" width="1.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1104.82" y="127.5" ></text>
</g>
<g >
<title>runtime.(*lockTimer).end (10 samples, 0.03%)</title><rect x="910.9" y="117" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="913.89" y="127.5" ></text>
</g>
<g >
<title>main.Hash (683 samples, 2.09%)</title><rect x="46.7" y="181" width="24.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="49.72" y="191.5" >m..</text>
</g>
<g >
<title>runtime.(*randomEnum).next (36 samples, 0.11%)</title><rect x="1104.7" y="117" width="1.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1107.72" y="127.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (9 samples, 0.03%)</title><rect x="1107.1" y="117" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1110.07" y="127.5" ></text>
</g>
<g >
<title>runtime.stealWork (439 samples, 1.35%)</title><rect x="1116.4" y="117" width="15.9" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1119.44" y="127.5" ></text>
</g>
<g >
<title>runtime.procyield (7 samples, 0.02%)</title><rect x="1107.1" y="85" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1110.14" y="95.5" ></text>
</g>
<g >
<title>runtime.resetspinning (149 samples, 0.46%)</title><rect x="1133.8" y="133" width="5.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1136.85" y="143.5" ></text>
</g>
<g >
<title>runtime.futexsleep (44 samples, 0.13%)</title><rect x="911.5" y="117" width="1.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="914.51" y="127.5" ></text>
</g>
<g >
<title>runtime.(*randomEnum).done (11 samples, 0.03%)</title><rect x="1104.3" y="117" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1107.32" y="127.5" ></text>
</g>
<g >
<title>runtime.(*guintptr).cas (10 samples, 0.03%)</title><rect x="835.7" y="69" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="838.71" y="79.5" ></text>
</g>
<g >
<title>runtime.cheaprand (7 samples, 0.02%)</title><rect x="911.3" y="117" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="914.25" y="127.5" ></text>
</g>
<g >
<title>main.main (309 samples, 0.95%)</title><rect x="1088.1" y="165" width="11.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1091.15" y="175.5" ></text>
</g>
<g >
<title>runtime.notesleep (176 samples, 0.54%)</title><rect x="1107.6" y="101" width="6.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1110.61" y="111.5" ></text>
</g>
<g >
<title>runtime.(*lockTimer).end (23 samples, 0.07%)</title><rect x="239.5" y="117" width="0.8" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="242.50" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (3 samples, 0.01%)</title><rect x="1088.2" y="37" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1091.18" y="47.5" ></text>
</g>
<g >
<title>runtime.(*lockTimer).begin (104 samples, 0.32%)</title><rect x="235.7" y="117" width="3.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="238.74" y="127.5" ></text>
</g>
<g >
<title>countbody (88 samples, 0.27%)</title><rect x="1156.9" y="133" width="3.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1159.89" y="143.5" ></text>
</g>
<g >
<title>runtime.pidlegetSpinning (6 samples, 0.02%)</title><rect x="1106.7" y="101" width="0.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1109.75" y="111.5" ></text>
</g>
<g >
<title>runtime.(*randomOrder).start (9 samples, 0.03%)</title><rect x="1106.3" y="117" width="0.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1109.28" y="127.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (104 samples, 0.32%)</title><rect x="1135.3" y="69" width="3.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1138.33" y="79.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (14 samples, 0.04%)</title><rect x="839.0" y="85" width="0.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="841.96" y="95.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (3 samples, 0.01%)</title><rect x="1088.0" y="149" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1091.04" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (104 samples, 0.32%)</title><rect x="1135.3" y="85" width="3.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1138.33" y="95.5" ></text>
</g>
<g >
<title>runtime.schedule (1,116 samples, 3.42%)</title><rect x="1100.1" y="149" width="40.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1103.09" y="159.5" >run..</text>
</g>
<g >
<title>runtime.futex (12 samples, 0.04%)</title><rect x="1140.9" y="101" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1143.90" y="111.5" ></text>
</g>
<g >
<title>runtime.checkRunqsNoP (6 samples, 0.02%)</title><rect x="1106.7" y="117" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1109.75" y="127.5" ></text>
</g>
<g >
<title>runtime.futex (172 samples, 0.53%)</title><rect x="783.7" y="101" width="6.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="786.71" y="111.5" ></text>
</g>
<g >
<title>strings.IndexByte (667 samples, 2.05%)</title><rect x="1165.9" y="149" width="24.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1168.87" y="159.5" >s..</text>
</g>
<g >
<title>runtime.lockWithRank (5,133 samples, 15.74%)</title><rect x="857.4" y="149" width="185.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="860.42" y="159.5" >runtime.lockWithRank</text>
</g>
<g >
<title>runtime.osyield (226 samples, 0.69%)</title><rect x="248.1" y="117" width="8.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="251.11" y="127.5" ></text>
</g>
<g >
<title>runtime.acquireSudog (12 samples, 0.04%)</title><rect x="131.3" y="133" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="134.32" y="143.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (23 samples, 0.07%)</title><rect x="1087.3" y="181" width="0.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1090.32" y="191.5" ></text>
</g>
<g >
<title>runtime.chanrecv (1,016 samples, 3.12%)</title><rect x="820.7" y="149" width="36.7" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="823.66" y="159.5" >run..</text>
</g>
<g >
<title>runtime.cheaprand (23 samples, 0.07%)</title><rect x="240.3" y="117" width="0.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="243.33" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2 (15,676 samples, 48.07%)</title><rect x="140.8" y="133" width="567.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="143.80" y="143.5" >runtime.lock2</text>
</g>
<g >
<title>runtime.futexwakeup (12 samples, 0.04%)</title><rect x="1140.9" y="117" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1143.90" y="127.5" ></text>
</g>
<g >
<title>runtime.scanobject (16 samples, 0.05%)</title><rect x="1087.5" y="117" width="0.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1090.46" y="127.5" ></text>
</g>
<g >
<title>runtime.memmove (17 samples, 0.05%)</title><rect x="838.0" y="101" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="840.99" y="111.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (19 samples, 0.06%)</title><rect x="1087.4" y="149" width="0.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1090.35" y="159.5" ></text>
</g>
<g >
<title>runtime.chanbuf (15 samples, 0.05%)</title><rect x="820.1" y="149" width="0.6" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="823.11" y="159.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (7 samples, 0.02%)</title><rect x="1087.0" y="69" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1090.03" y="79.5" ></text>
</g>
<g >
<title>runtime.lock (6 samples, 0.02%)</title><rect x="140.1" y="149" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="143.15" y="159.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Int64).Load (24 samples, 0.07%)</title><rect x="1131.5" y="101" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1134.46" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (58 samples, 0.18%)</title><rect x="835.5" y="117" width="2.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="838.53" y="127.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (215 samples, 0.66%)</title><rect x="132.4" y="133" width="7.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="135.37" y="143.5" ></text>
</g>
<g >
<title>runtime.memmove (173 samples, 0.53%)</title><rect x="790.0" y="149" width="6.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="793.01" y="159.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (9 samples, 0.03%)</title><rect x="1133.9" y="117" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1136.88" y="127.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (17 samples, 0.05%)</title><rect x="1133.2" y="133" width="0.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1136.19" y="143.5" ></text>
</g>
<g >
<title>syscall.read (149 samples, 0.46%)</title><rect x="1093.9" y="117" width="5.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1096.90" y="127.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Int32).CompareAndSwap (3 samples, 0.01%)</title><rect x="1139.1" y="117" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1142.13" y="127.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (341 samples, 1.05%)</title><rect x="845.1" y="133" width="12.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="848.08" y="143.5" ></text>
</g>
<g >
<title>runtime.mPark (182 samples, 0.56%)</title><rect x="1107.4" y="117" width="6.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1110.40" y="127.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (11 samples, 0.03%)</title><rect x="1141.4" y="181" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1144.41" y="191.5" ></text>
</g>
<g >
<title>runtime.futex (66 samples, 0.20%)</title><rect x="1084.6" y="101" width="2.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1087.64" y="111.5" ></text>
</g>
<g >
<title>runtime.unlock2 (2,257 samples, 6.92%)</title><rect x="708.3" y="133" width="81.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="711.27" y="143.5" >runtime.u..</text>
</g>
<g >
<title>runtime.acquirep (12 samples, 0.04%)</title><rect x="1132.5" y="101" width="0.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1135.51" y="111.5" ></text>
</g>
<g >
<title>indexbytebody (608 samples, 1.86%)</title><rect x="1166.6" y="133" width="22.0" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1169.63" y="143.5" >i..</text>
</g>
<g >
<title>runtime.lock2 (17 samples, 0.05%)</title><rect x="1133.2" y="117" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1136.19" y="127.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (1,196 samples, 3.67%)</title><rect x="1043.8" y="149" width="43.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1046.75" y="159.5" >runt..</text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (7 samples, 0.02%)</title><rect x="1087.0" y="133" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1090.03" y="143.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (3 samples, 0.01%)</title><rect x="1087.9" y="101" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1090.89" y="111.5" ></text>
</g>
<g >
<title>runtime.(*guintptr).cas (19 samples, 0.06%)</title><rect x="1122.1" y="85" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1125.05" y="95.5" ></text>
</g>
<g >
<title>runtime.mallocgc (151 samples, 0.46%)</title><rect x="1151.4" y="133" width="5.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1154.43" y="143.5" ></text>
</g>
<g >
<title>main.getSplit (91 samples, 0.28%)</title><rect x="796.3" y="181" width="3.3" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="799.27" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (22 samples, 0.07%)</title><rect x="1087.4" y="165" width="0.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1090.35" y="175.5" ></text>
</g>
<g >
<title>runtime.nanotime (3 samples, 0.01%)</title><rect x="836.4" y="69" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="839.39" y="79.5" ></text>
</g>
<g >
<title>runtime.lock2 (5,130 samples, 15.73%)</title><rect x="857.5" y="133" width="185.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="860.52" y="143.5" >runtime.lock2</text>
</g>
<g >
<title>runtime.memmove (17 samples, 0.05%)</title><rect x="1089.4" y="117" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1092.38" y="127.5" ></text>
</g>
<g >
<title>runtime.unlock2 (1,189 samples, 3.65%)</title><rect x="1044.0" y="133" width="43.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1047.01" y="143.5" >runt..</text>
</g>
<g >
<title>runtime.park_m (1,158 samples, 3.55%)</title><rect x="1099.4" y="165" width="41.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1102.44" y="175.5" >run..</text>
</g>
<g >
<title>runtime.futex (103 samples, 0.32%)</title><rect x="1135.4" y="53" width="3.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1138.37" y="63.5" ></text>
</g>
<g >
<title>runtime.unlock (17 samples, 0.05%)</title><rect x="1043.1" y="149" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1046.14" y="159.5" ></text>
</g>
<g >
<title>runtime.futex (44 samples, 0.13%)</title><rect x="911.5" y="101" width="1.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="914.51" y="111.5" ></text>
</g>
<g >
<title>runtime.add (6 samples, 0.02%)</title><rect x="819.9" y="149" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="822.90" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrain (3 samples, 0.01%)</title><rect x="1088.0" y="133" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1091.04" y="143.5" ></text>
</g>
<g >
<title>runtime.wakep (14 samples, 0.04%)</title><rect x="837.0" y="69" width="0.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="840.05" y="79.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (149 samples, 0.46%)</title><rect x="1093.9" y="85" width="5.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1096.90" y="95.5" ></text>
</g>
<g >
<title>runtime.wakep (133 samples, 0.41%)</title><rect x="1134.3" y="117" width="4.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1137.32" y="127.5" ></text>
</g>
<g >
<title>runtime.unlock2 (23 samples, 0.07%)</title><rect x="1140.5" y="133" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1143.50" y="143.5" ></text>
</g>
<g >
<title>runtime.pidleput (18 samples, 0.06%)</title><rect x="1115.7" y="117" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1118.72" y="127.5" ></text>
</g>
<g >
<title>main.chunkWorker (20,033 samples, 61.43%)</title><rect x="71.4" y="181" width="724.9" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="74.44" y="191.5" >main.chunkWorker</text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (7 samples, 0.02%)</title><rect x="1087.0" y="101" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1090.03" y="111.5" ></text>
</g>
<g >
<title>runtime.goready (58 samples, 0.18%)</title><rect x="835.5" y="133" width="2.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="838.53" y="143.5" ></text>
</g>
<g >
<title>runtime.findRunnable (836 samples, 2.56%)</title><rect x="1102.9" y="133" width="30.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1105.95" y="143.5" >ru..</text>
</g>
<g >
<title>strings.Count (88 samples, 0.27%)</title><rect x="1156.9" y="149" width="3.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1159.89" y="159.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (18 samples, 0.06%)</title><rect x="838.0" y="117" width="0.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="840.95" y="127.5" ></text>
</g>
<g >
<title>runtime.(*timeHistogram).record (4 samples, 0.01%)</title><rect x="1102.6" y="101" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1105.62" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (5 samples, 0.02%)</title><rect x="1115.9" y="85" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1118.90" y="95.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).init.func2 (7 samples, 0.02%)</title><rect x="1087.0" y="149" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1090.03" y="159.5" ></text>
</g>
</g>
</svg>
